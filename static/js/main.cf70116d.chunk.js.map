{"version":3,"sources":["ToDoElement.js","ToDoList.js","LocalStorage.js","ButtonColorData.js","ChangeColor.js","App.js","index.js"],"names":["ToDoElement","props","element","handleDeleteElement","handleEditingElement","color","textColor","elementIndex","Col","xs","md","Card","bg","style","Header","Body","Title","title","Button","variant","onClick","id","ToDoList","list","map","getLocalStorage","item","localStorage","getItem","JSON","parse","colorList","ChangeColor","handleColorChange","ButtonGroup","aria-label","size","className","index","App","useState","toDo","setToDo","toDoList","setToDoList","isEditing","setIsEditing","message","alert","setAlert","editId","setEditId","setColor","handleAlerts","useEffect","timeout","setTimeout","clearTimeout","setItem","stringify","Container","Alert","Heading","Row","onSubmit","e","preventDefault","newElement","Date","toLocaleTimeString","concat","type","value","onChange","target","placeholder","filteredList","filter","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf70116d.chunk.js","sourcesContent":["import {Button, Card, Col} from \"react-bootstrap\";\r\nimport {FaEdit, TiDeleteOutline} from \"react-icons/all\";\r\n\r\n\r\nconst ToDoElement = (props) => {\r\n    const element = props.element;\r\n    const handleDeleteElement = props.handleDeleteElement ;\r\n    const handleEditingElement=props.handleEditingElement ;\r\n    const color = props.color;\r\n    const textColor = (color===\"warning\"||color===\"light\") ? \"black\" : \"white\" ;\r\n    const elementIndex= props.elementIndex;\r\n\r\n    return (\r\n\r\n        <Col xs={6} md={4}>\r\n            <Card  bg={color} style={{color:textColor}}>\r\n                <Card.Header >{elementIndex+1}</Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>{element.title}</Card.Title>\r\n\r\n                </Card.Body>\r\n                <Button variant={color}\r\n                        onClick={()=>handleEditingElement(element.id)}>\r\n                    <FaEdit></FaEdit>\r\n                </Button>\r\n                <Button variant={color}\r\n                        onClick={()=>handleDeleteElement(element.id)}>\r\n                    <TiDeleteOutline></TiDeleteOutline>\r\n                </Button>\r\n            </Card>\r\n        </Col>\r\n\r\n    )\r\n};\r\n\r\nexport default ToDoElement ;","\r\nimport ToDoElement from \"./ToDoElement\";\r\n\r\nconst ToDoList = (props)=> {\r\n    const list = props.list ;\r\n    const handleDeleteElement = props.handleDeleteElement ;\r\n    const handleEditingElement = props.handleEditingElement;\r\n    const color = props.color;\r\n\r\n\r\n    return (\r\n        list.map((element,elementIndex )=> {\r\n            return <ToDoElement element={element}\r\n                                key={element.id}\r\n                                elementIndex={elementIndex}\r\n                                handleDeleteElement={handleDeleteElement}\r\n                                handleEditingElement={handleEditingElement}\r\n                                color={color}/>\r\n        })\r\n    )\r\n\r\n}\r\n\r\nexport default ToDoList ;","\r\n\r\nconst getLocalStorage =(item) => {\r\n    let list = localStorage.getItem(item) ;\r\n    if (list) {\r\n        return  JSON.parse(list);\r\n    }\r\n    return item===\"list\" ?[] : \"primary\"\r\n} ;\r\n\r\nexport default getLocalStorage;","\r\n\r\nconst colorList= [\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'warning',\r\n    'info',\r\n    'light',\r\n    'dark',\r\n]\r\n\r\nexport default colorList;","import colorList from \"./ButtonColorData\";\r\nimport {Button, ButtonGroup} from \"react-bootstrap\";\r\n\r\nconst ChangeColor = (props)=> {\r\n\r\nconst handleColorChange = props.handleColorChange ;\r\n\r\n   return ( <ButtonGroup aria-label=\"coloring\" size=\"lg\" className=\"mb-2\" >\r\n           {\r\n               colorList.map((color,index)=> <Button variant={color}\r\n                                                     key={index}\r\n               onClick={()=>handleColorChange(color)}>....</Button> )\r\n\r\n           }\r\n\r\n    </ButtonGroup>\r\n   )\r\n\r\n}\r\n\r\nexport default ChangeColor;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport {Alert, Button, Col, Container, Row} from \"react-bootstrap\";\nimport {useEffect, useState} from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport getLocalStorage from \"./LocalStorage\";\nimport ChangeColor from \"./ChangeColor\";\n\n\n\nfunction App() {\n    const [toDo , setToDo] = useState('');\n    const [toDoList ,setToDoList] = useState(getLocalStorage(\"list\"));\n    const [isEditing, setIsEditing] = useState(false);\n    const [alert ,setAlert] = useState( {variant:\"\" , message:\"\"}) ;\n    const [editId ,setEditId] = useState('');\n    const [color , setColor] =useState(getLocalStorage(\"color\"))\n    const handleAlerts= (variant , message)=> {\n        setAlert({variant,message});\n    }\n    const handleDeleteElement  =(id) => {\n        const filteredList = toDoList.filter((item)=> item.id !== id);\n        setToDoList(filteredList);\n        setToDo('');\n        handleAlerts(\"danger\" , \"element deleted\");\n    }\n    const handleEditingElement =(id) => {\n        const element = toDoList.find((item)=> item.id===id);\n        setIsEditing(true) ;\n        setToDo(element.title);\n        setEditId(element.id);\n    }\n    const handleSubmit =(e)=> {\n        e.preventDefault();\n\n         if (!toDo) {\n             handleAlerts(\"danger\" , \"cannot add empty string\")\n\n         }\n         else if (toDo && isEditing) {\n             setToDoList(toDoList.map((item)=> {\n                 if (item.id ===editId) {\n                     return {...item , title:toDo}\n                 }\n                 return item ;\n             }))\n             handleAlerts(\"success\" , \"updated successfully\") ;\n             setIsEditing(false);\n             setEditId('');\n             setToDo('');\n\n         }\n         else  {\n             const newElement = [{id:new Date().toLocaleTimeString() , title: toDo}] ;\n             setToDoList(toDoList.concat(newElement)) ;\n             setToDo('');\n\n         }\n    }\n    const handleColorChange = (color) => {\n        setColor(color);\n    }\n\n    useEffect(()=> {\n        let timeout = setTimeout(()=> handleAlerts(\"\",\"\") , 3000) ;\n        return ()=> clearTimeout(timeout);\n    } , [alert]) ;\n    useEffect(()=> {\n        localStorage.setItem('list' , JSON.stringify(toDoList)) ;\n    }, [toDoList]) ;\n    useEffect(()=> {\n        localStorage.setItem('color' , JSON.stringify(color)) ;\n    }, [color])\n\n    return (\n        <Container>\n\n                <Alert variant={alert.variant} >\n                    <Alert.Heading>\n                        {alert.message}\n                    </Alert.Heading>\n                </Alert>\n        <Row>\n            <Col>\n                <form  onSubmit={handleSubmit}>\n                    <label > what is your plan ? </label>\n                    <input type=\"text\" value={toDo}\n                           onChange={(e)=>setToDo(e.target.value)}\n                           placeholder=\"e.g// Sunday : fishing\"\n                    />\n                    <Button type=\"submit\" variant={color}> {isEditing? \"edit\" : \"add element\"}</Button>\n                </form>\n            </Col>\n            <Col>\n                <ChangeColor handleColorChange={handleColorChange}/>\n            </Col>\n\n        </Row>\n            <Row>\n                <ToDoList list={toDoList}\n                          handleDeleteElement={handleDeleteElement}\n                          handleEditingElement={handleEditingElement}\n                           color={color} />\n            </Row>\n        </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}