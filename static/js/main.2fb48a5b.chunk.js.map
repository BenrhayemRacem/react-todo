{"version":3,"sources":["LocalStorage.js","GlobalContext.js","ToDoElement.js","ToDoList.js","ButtonColorData.js","ChangeColor.js","AlertCompnent.js","FormComponent.js","App.js","index.js"],"names":["getLocalStorage","item","list","localStorage","getItem","JSON","parse","AppContext","React","createContext","AppProvider","children","useState","toDo","setToDo","toDoList","setToDoList","isEditing","setIsEditing","variant","message","alert","setAlert","editId","setEditId","color","setColor","handleAlerts","useEffect","timeout","setTimeout","clearTimeout","setItem","stringify","Provider","value","handleSubmit","e","preventDefault","map","id","title","newElement","Date","toLocaleTimeString","concat","handleColorChange","handleDeleteElement","filteredList","filter","handleEditingElement","element","find","handleInput","chr","useGlobalContext","useContext","ToDoElement","props","textColor","elementIndex","Col","xs","md","Card","bg","style","Header","Body","Title","Button","onClick","ToDoList","colorList","ChangeColor","ButtonGroup","aria-label","size","className","index","AlertComponent","Alert","Heading","FormComponent","onSubmit","type","onChange","target","placeholder","App","Container","Row","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fb48a5b.chunk.js","sourcesContent":["\r\n\r\nconst getLocalStorage =(item) => {\r\n    let list = localStorage.getItem(item) ;\r\n    if (list) {\r\n        return  JSON.parse(list);\r\n    }\r\n    return item===\"list\" ?[] : \"primary\"\r\n} ;\r\n\r\nexport default getLocalStorage;","\r\nimport React, {useState, useContext, useEffect} from 'react';\r\nimport getLocalStorage from \"./LocalStorage\";\r\n\r\nconst AppContext = React.createContext(null);\r\n\r\nconst AppProvider = ({children})=> {\r\n    const [toDo , setToDo] = useState('');\r\n    const [toDoList ,setToDoList] = useState(getLocalStorage(\"list\"));\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [alert ,setAlert] = useState( {variant:\"\" , message:\"\"}) ;\r\n    const [editId ,setEditId] = useState('');\r\n    const [color , setColor] =useState(getLocalStorage(\"color\")) ;\r\n\r\n    const handleAlerts= (variant , message)=> {\r\n        setAlert({variant,message});\r\n    }\r\n    const handleDeleteElement  =(id) => {\r\n        const filteredList = toDoList.filter((item)=> item.id !== id);\r\n        setToDoList(filteredList);\r\n        setToDo('');\r\n        handleAlerts(\"danger\" , \"element deleted\");\r\n    }\r\n    const handleEditingElement =(id) => {\r\n        const element = toDoList.find((item)=> item.id===id);\r\n        setIsEditing(true) ;\r\n        setToDo(element.title);\r\n        setEditId(element.id);\r\n    }\r\n    const handleSubmit =(e)=> {\r\n        e.preventDefault();\r\n\r\n        if (!toDo) {\r\n            handleAlerts(\"danger\" , \"cannot add empty string\")\r\n\r\n        }\r\n        else if (toDo && isEditing) {\r\n            setToDoList(toDoList.map((item)=> {\r\n                if (item.id ===editId) {\r\n                    return {...item , title:toDo}\r\n                }\r\n                return item ;\r\n            }))\r\n            handleAlerts(\"success\" , \"updated successfully\") ;\r\n            setIsEditing(false);\r\n            setEditId('');\r\n            setToDo('');\r\n\r\n        }\r\n        else  {\r\n            const newElement = [{id:new Date().toLocaleTimeString() , title: toDo}] ;\r\n            setToDoList(toDoList.concat(newElement)) ;\r\n            setToDo('');\r\n\r\n        }\r\n    }\r\n    const handleColorChange = (color) => {\r\n        setColor(color);\r\n    }\r\n    const handleInput =(chr) => {\r\n        setToDo(chr);\r\n    }\r\n    useEffect(()=> {\r\n        let timeout = setTimeout(()=> handleAlerts(\"\",\"\") , 3000) ;\r\n        return ()=> clearTimeout(timeout);\r\n    } , [alert]) ;\r\n    useEffect(()=> {\r\n        localStorage.setItem('list' , JSON.stringify(toDoList)) ;\r\n    }, [toDoList]) ;\r\n    useEffect(()=> {\r\n        localStorage.setItem('color' , JSON.stringify(color)) ;\r\n    }, [color])\r\n\r\n\r\n    return (\r\n        <AppContext.Provider value={{handleAlerts\r\n            ,handleSubmit,\r\n            handleColorChange,\r\n            handleDeleteElement,\r\n            handleEditingElement,\r\n            handleInput,\r\n            toDoList,\r\n            toDo,\r\n            alert,\r\n            isEditing,\r\n            editId,\r\n            color}}>\r\n            {children}\r\n\r\n        </AppContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport const useGlobalContext =()=> {\r\n    return useContext(AppContext);\r\n}\r\n\r\nexport {AppContext,AppProvider};\r\n\r\n","import {Button, Card, Col} from \"react-bootstrap\";\r\nimport {FaEdit, TiDeleteOutline} from \"react-icons/all\";\r\nimport {useGlobalContext} from \"./GlobalContext\";\r\n\r\n\r\nconst ToDoElement = (props) => {\r\n   const {color , handleEditingElement ,handleDeleteElement} = useGlobalContext()\r\n    const textColor = (color===\"warning\"||color===\"light\") ? \"black\" : \"white\" ;\r\n    const elementIndex= props.elementIndex;\r\n    const element = props.element;\r\n\r\n    return (\r\n\r\n        <Col xs={6} md={4}>\r\n            <Card  bg={color} style={{color:textColor}}>\r\n                <Card.Header >{elementIndex+1}</Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>{element.title}</Card.Title>\r\n\r\n                </Card.Body>\r\n                <Button variant={color}\r\n                        onClick={()=>handleEditingElement(element.id)}>\r\n                    <FaEdit></FaEdit>\r\n                </Button>\r\n                <Button variant={color}\r\n                        onClick={()=>handleDeleteElement(element.id)}>\r\n                    <TiDeleteOutline></TiDeleteOutline>\r\n                </Button>\r\n            </Card>\r\n        </Col>\r\n\r\n    )\r\n};\r\n\r\nexport default ToDoElement ;","\r\nimport ToDoElement from \"./ToDoElement\";\r\nimport {useGlobalContext} from \"./GlobalContext\";\r\n\r\nconst ToDoList = ()=> {\r\n\r\nconst {toDoList } = useGlobalContext();\r\n\r\n    return (\r\n        toDoList.map((element,elementIndex )=> {\r\n            return <ToDoElement element={element}\r\n                                key={element.id}\r\n                                elementIndex={elementIndex}\r\n                               />\r\n        })\r\n    )\r\n\r\n}\r\n\r\nexport default ToDoList ;","\r\n\r\nconst colorList= [\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'warning',\r\n    'info',\r\n    'light',\r\n    'dark',\r\n]\r\n\r\nexport default colorList;","import colorList from \"./ButtonColorData\";\r\nimport {Button, ButtonGroup} from \"react-bootstrap\";\r\nimport {useGlobalContext} from \"./GlobalContext\";\r\n\r\nconst ChangeColor = ()=> {\r\n\r\nconst {handleColorChange} = useGlobalContext();\r\n\r\n   return ( <ButtonGroup aria-label=\"coloring\" size=\"lg\" className=\"mb-2\" >\r\n           {\r\n               colorList.map((color,index)=> <Button variant={color}\r\n                                                     key={index}\r\n               onClick={()=>handleColorChange(color)}>....</Button> )\r\n\r\n           }\r\n\r\n    </ButtonGroup>\r\n   )\r\n\r\n}\r\n\r\nexport default ChangeColor;","import {Alert} from \"react-bootstrap\";\r\nimport {useGlobalContext} from \"./GlobalContext\";\r\n\r\n\r\nconst AlertComponent = ()=> {\r\nconst {alert} = useGlobalContext();\r\n\r\n    return (\r\n        <Alert variant={alert.variant} >\r\n            <Alert.Heading>\r\n                {alert.message}\r\n            </Alert.Heading>\r\n        </Alert>\r\n    )\r\n}\r\n\r\nexport default AlertComponent ;\r\n","import {Button} from \"react-bootstrap\";\r\nimport {useGlobalContext} from \"./GlobalContext\";\r\n\r\n\r\nconst FormComponent = ()=> {\r\n    const {handleInput , toDo ,color , isEditing , handleSubmit} = useGlobalContext();\r\n    return (\r\n        <form  onSubmit={handleSubmit}>\r\n            <label > what is your plan ? </label>\r\n            <input type=\"text\" value={toDo}\r\n                   onChange={(e)=>handleInput(e.target.value)}\r\n                   placeholder=\"e.g// Sunday : fishing\"\r\n            />\r\n            <Button type=\"submit\" variant={color}> {isEditing? \"edit\" : \"add element\"}</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormComponent;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Col, Container, Row} from \"react-bootstrap\";\nimport ToDoList from \"./ToDoList\";\nimport ChangeColor from \"./ChangeColor\";\nimport AlertComponent from \"./AlertCompnent\";\nimport FormComponent from \"./FormComponent\";\n\n\n\n\nfunction App() {\n    return (\n        <Container>\n                <AlertComponent/>\n        <Row>\n            <Col>\n                <FormComponent/>\n            </Col>\n            <Col>\n                <ChangeColor />\n            </Col>\n        </Row>\n            <Row>\n                <ToDoList />\n            </Row>\n        </Container>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {AppProvider} from \"./GlobalContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <AppProvider>\n    <App />\n      </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}